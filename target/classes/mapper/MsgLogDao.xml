<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.emailconsumer.dao.MsgLogDao">
    <resultMap id="BaseResultMap" type="com.demo.emailconsumer.pojo.MsgLog">
        <id column="msg_id" jdbcType="VARCHAR" property="msgId"/>
        <result column="msg" jdbcType="VARCHAR" property="msg"/>
        <result column="exchange" jdbcType="VARCHAR" property="exchange"/>
        <result column="routing_key" jdbcType="VARCHAR" property="routingKey"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="try_count" jdbcType="INTEGER" property="tryCount"/>
        <result column="next_try_time" jdbcType="TIMESTAMP" property="nextTryTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    msg_id, msg, exchange, routing_key, `status`, try_count, next_try_time, create_time, 
    update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from msg_log
        where msg_id = #{msgId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from msg_log
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" keyColumn="msg_id" keyProperty="msgId" parameterType="com.demo.emailconsumer.pojo.MsgLog"
            useGeneratedKeys="true">
    insert into msg_log (msg_id,msg, exchange, routing_key,
      `status`, try_count, next_try_time, 
      create_time, update_time)
    values (#{msgId,jdbcType=VARCHAR},#{msg,jdbcType=VARCHAR}, #{exchange,jdbcType=VARCHAR}, #{routingKey,jdbcType=VARCHAR},
      #{status,jdbcType=INTEGER}, #{tryCount,jdbcType=INTEGER}, #{nextTryTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" keyColumn="msg_id" keyProperty="msgId" parameterType="com.demo.emailconsumer.pojo.MsgLog"
            useGeneratedKeys="true">
        insert into msg_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msg != null">
                msg,
            </if>
            <if test="exchange != null">
                exchange,
            </if>
            <if test="routingKey != null">
                routing_key,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="tryCount != null">
                try_count,
            </if>
            <if test="nextTryTime != null">
                next_try_time,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="msg != null">
                #{msg,jdbcType=VARCHAR},
            </if>
            <if test="exchange != null">
                #{exchange,jdbcType=VARCHAR},
            </if>
            <if test="routingKey != null">
                #{routingKey,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="tryCount != null">
                #{tryCount,jdbcType=INTEGER},
            </if>
            <if test="nextTryTime != null">
                #{nextTryTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.demo.emailconsumer.pojo.MsgLog">
        update msg_log
        <set>
            <if test="msg != null">
                msg = #{msg,jdbcType=VARCHAR},
            </if>
            <if test="exchange != null">
                exchange = #{exchange,jdbcType=VARCHAR},
            </if>
            <if test="routingKey != null">
                routing_key = #{routingKey,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="tryCount != null">
                try_count = #{tryCount,jdbcType=INTEGER},
            </if>
            <if test="nextTryTime != null">
                next_try_time = #{nextTryTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where msg_id = #{msgId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.demo.emailconsumer.pojo.MsgLog">
    update msg_log
    set msg = #{msg,jdbcType=VARCHAR},
      exchange = #{exchange,jdbcType=VARCHAR},
      routing_key = #{routingKey,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      try_count = #{tryCount,jdbcType=INTEGER},
      next_try_time = #{nextTryTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>

    <update id="updateStatus" parameterType="map">
    update msg_log set status=#{status}
    where msg_id=#{msgId}
  </update>

    <select id="selectTimeoutMsgs" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from msg_log
        where status=0 and next_try_time &lt;= now()
    </select>

  <update id="updateTryCount" parameterType="map">
    update msg_log set  try_count=try_count+1,next_try_time=#{nextTryTime},update_time=now()
    where msg_id=#{msgId}
  </update>
</mapper>